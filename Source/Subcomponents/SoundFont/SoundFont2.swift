//
//  SoundFont2.swift
//  PerpetualGroove
//
//  Created by Jason Cardwell on 10/19/15.
//  Copyright Â© 2015 Moondeer Studios. All rights reserved.
//

import Foundation
import MoonKit
import class UIKit.UIImage

/// A protocol specifying an interface for types wishing to serve as a sound font resource.
public protocol SoundFont2: CustomStringConvertible,
                            JSONValueConvertible,
                            JSONValueInitializable
{

  /// The sound font file's location.
  var url: URL { get }

  /// The sound font file's data.
  var data: Data { get }

  /// The presets present in the sound font file.
  var presetHeaders: [PresetHeader] { get }

  /// Whether the sound font contains general midi percussion presets.
  var isPercussion: Bool { get }

  /// The name to display in the user interface for the sound font.
  var displayName: String { get }

  /// The sound font file's base name without the extension.
  var fileName: String { get }

  /// The image to display in the user interface for the sound font.
  var image: UIImage { get }

  /// Accessor for retrieving a preset via the totally ordered array of presets.
  subscript(position: Int) -> PresetHeader { get }

  /// Accessor for retrieving a preset by its program and bank numbers.
  subscript(program program: UInt8, bank bank: UInt8) -> PresetHeader? { get }

  /// Initialize a sound font using it's file location.
  init(url: URL) throws

}

extension SoundFont2 {

  /// A JSON object with an entry for 'url' containing the absolute string
  /// representation of `url`.
  public var jsonValue: JSONValue { return ["url": url.absoluteString] }

  /// Initializing with a JSON value.
  /// - Parameter jsonValue: To be successful, `jsonValue` must be a JSON object
  ///                         with an entry for 'url` whose value is a string
  ///                         representing a valid URL.
  public init?(_ jsonValue: JSONValue?) {

    // Get the url from the JSON value.
    guard let url = URL(string: String(ObjectJSONValue(jsonValue)?["url"]) ?? "") else {
      return nil
    }

    // Initialize with the url.
    do { try self.init(url: url) } catch { return nil }

  }

  /// Returns the element in `presetHeaders` located at `position`.
  ///
  /// - Parameter position: The preset's index.
  /// - Returns: The preset at `position`.
  public subscript(position: Int) -> PresetHeader { presetHeaders[position] }

  /// Returns the element in `presetHeaders` matching the specified values.
  ///
  /// - Parameters:
  ///   - program: The program value for the preset.
  ///   - bank: The bank value for the preset.
  /// - Returns: The matching preset or `nil`.
  public subscript(program program: UInt8, bank bank: UInt8) -> PresetHeader? {
    presetHeaders.first(where: {$0.program == program && $0.bank == bank})
  }

  /// Returns `true` iff `other.url` is equal to `url`.
  /// - Parameter other: The sound font to which equality is being compared.
  /// - Returns: `true` if the sound font instances point to the same file
  ///            and `false` otherwise.
  public func isEqualTo(_ other: SoundFont2) -> Bool {

    // Get the two urls as file reference urls.
    let lhs = (self.url as NSURL).fileReferenceURL()
    let rhs = (other.url as NSURL).fileReferenceURL()

    return (lhs == nil
              ? false
              : (rhs == nil
                ? lhs == nil
                  : lhs!.isEqualToFileURL(rhs!)))

  }

  /// The contents of `url` as raw data.
  /// - Requires: `url` is valid and reachable.
  public var data: Data {
    tryOrDie(message: "Failed to retrieve data from disk.") {
      try Data(contentsOf: url)
    }
  }

  /// The collection of preset headers generated by parsing `data`.
  public var presetHeaders: [PresetHeader] {
    (try? File.presetHeaders(from: data)) ?? []
  }

  public var description: String { "\(displayName) - \(fileName)" }

}

/// A structure for creating a sound font with only a URL.
public struct AnySoundFont: SoundFont2 {

  /// The URL for the file containing the sound font's data.
  public let url: URL

  /// The image to display in the user interface for the sound font.
  public var image: UIImage { #imageLiteral(resourceName: "oscillator") }

  /// Whether the sound font contains general midi percussion presets.
  public let isPercussion: Bool

  /// The base name of the file located at `url`.
  public var fileName: String { url.path.baseNameExt.baseName }

  /// The user-facing name of the sound font.
  public var displayName: String { fileName }

  /// Initializing with a URL.
  /// - Parameters:
  ///   - url: The url for the sound font file.
  ///   - isPercussion: Whether the file contains percussion.
  /// - Requires: `url` is reachable.
  /// - Throws: `ErrorMessage` when `url` is not reachable.
  public init(url: URL, isPercussion: Bool = false) throws {

    // Check that the url is reachable.
    guard try url.checkResourceIsReachable() else {
      throw ErrorMessage(errorDescription: "AnySoundFont.Error",
                         failureReason: "Invalid URL")
    }

    // Initialize `url` with the specified URL.
    self.url = url

    // Initialize the percussion flag.
    self.isPercussion = isPercussion

  }

  /// Initializing with a URL. The `isPercussion` flag will be set to `false`.
  /// - Parameter url: The url for the sound font file.
  /// - Requires: `url` is reachable.
  /// - Throws: `ErrorMessage` when `url` is not reachable.
  public init(url: URL) throws { try self.init(url: url, isPercussion: false) }

  /// The 'SPYRO's Pure Oscillators' sound font located in the application's bundle.
  public static let spyro = try! AnySoundFont(
    url: Bundle.main.url(forResource: "SPYRO's Pure Oscillators",
                         withExtension: "sf2")!)
  
}

/// A structure for sound fonts that are part of the 'Emax' collection located within the
/// application's bundle.
public struct EmaxSoundFont: SoundFont2 {

  /// An enumeration of the volumes available within the 'Emax' collection.
  public struct Volume {
    public let index: Int
    public let displayName: String
    public let image: UIImage
    public let isPercussion: Bool

    public static let brassAndWoodwinds  = Volume(1, "Brass & Woodwinds", #imageLiteral(resourceName: "brass"))
    public static let keyboardsAndSynths = Volume(2, "Keyboards & Synths", #imageLiteral(resourceName: "piano_keyboard"))
    public static let guitarsAndBasses   = Volume(3, "Guitars & Basses", #imageLiteral(resourceName: "guitar_bass"))
    public static let worldInstruments   = Volume(4, "World Instruments", #imageLiteral(resourceName: "world"))
    public static let drumsAndPercussion = Volume(5, "Drums & Percussion", #imageLiteral(resourceName: "percussion"), true)
    public static let orchestral         = Volume(6, "Orchestral", #imageLiteral(resourceName: "orchestral"))

    private init(_ index: Int,
                 _ displayName: String,
                 _ image: UIImage,
                 _ isPercussion: Bool = false)
    {
      self.index = index
      self.displayName = displayName
      self.image = image
      self.isPercussion = isPercussion
    }

    init(index: Int) throws {
      switch index {
        case 1: self = Volume.brassAndWoodwinds
        case 2: self = Volume.keyboardsAndSynths
        case 3: self = Volume.guitarsAndBasses
        case 4: self = Volume.worldInstruments
        case 5: self = Volume.drumsAndPercussion
        case 6: self = Volume.orchestral
        default:
          throw ErrorMessage(errorDescription: "EmaxSoundFont.Error",
                             failureReason: "Invalid Volume Number")
      }
    }
  }

  /// The URL for the sound font within the application's main bundle.
  public var url: URL { Bundle.main.url(forResource: fileName, withExtension: "sf2")! }

  /// The volume of the sound font.
  public let volume: Volume

  /// Whether the sound font contains general midi percussion presets. This is `false`
  /// unless the sound font represents the 'drums and percussion' volume.
  public var isPercussion: Bool { volume.isPercussion }

  /// The title-cased name of the sound font's volume.
  public var displayName: String { volume.displayName }

  /// The name of the sound font file within the application's main bundle.
  public var fileName: String { "Emax Volume \(volume.index)" }

  /// The image to display in the user interface for the sound font. Unique to `volume`.
  public var image: UIImage { volume.image }

  /// Initializing with a volume.
  public init(_ volume: Volume) { self.volume = volume }

  /// Initializing with a URL. The sound font is initialized by matching `url.path`
  /// against 'Emax Volume #` where '#' is a number between 1 and 6.
  ///
  /// - Parameter url: The url of the Emax Volume.
  /// - Throws: `ErrorMessage` when a `url` cannot be matched to a volume.
  public init(url: URL) throws {

    // Retrieve the volume via regular expression matching.
    guard let match = (~/"Emax Volume ([1-6])").firstMatch(in: url.path),
          let string = match.captures[1]?.substring,
          let volume = Int(String(string))
    else
    {
      throw ErrorMessage(errorDescription: "EmaxSoundFont.Error",
                         failureReason: "Invalid URL")
    }

    // Initialize with the parsed volume number.
    self.init(try Volume(index: volume))

  }

}
