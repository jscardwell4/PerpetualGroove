//
//  SoundFont2.swift
//  PerpetualGroove
//
//  Created by Jason Cardwell on 10/19/15.
//  Copyright Â© 2015 Moondeer Studios. All rights reserved.
//

import Foundation
import MoonDev
import struct SwiftUI.Image

// MARK: - SoundFont2

/// A protocol specifying an interface for types wishing to serve as a sound font resource.
@available(iOS 14.0, *)
@available(OSX 10.15, *)
public protocol SoundFont2: CustomStringConvertible
{
  /// The sound font file's location.
  var url: URL { get }
  
  /// The sound font file's data.
  var data: Data { get }
  
  /// The presets present in the sound font file.
  @available(OSX 11.0, *)
  var presetHeaders: [PresetHeader] { get }
  
  /// Whether the sound font contains general midi percussion presets.
  var isPercussion: Bool { get }
  
  /// The name to display in the user interface for the sound font.
  var displayName: String { get }
  
  /// The sound font file's base name without the extension.
  var fileName: String { get }
  
  /// The image to display in the user interface for the sound font.
  var image: Image { get }
  
  /// Accessor for retrieving a preset via the totally ordered array of presets.
  @available(OSX 11.0, *)
  subscript(position: Int) -> PresetHeader { get }
  
  /// Accessor for retrieving a preset by its program and bank numbers.
  @available(OSX 11.0, *)
  subscript(program program: UInt8, bank bank: UInt8) -> PresetHeader? { get }
  
  /// Initialize a sound font using it's file location.
  init(url: URL) throws
}

@available(iOS 14.0, *)
@available(OSX 10.15, *)
public extension SoundFont2
{
  #if os(iOS)
  /// A JSON object with an entry for 'url' containing the absolute string
  /// representation of `url`.
  var jsonValue: JSONValue { ["url": url.absoluteString] }

  /// Initializing with a JSON value.
  /// - Parameter jsonValue: To be successful, `jsonValue` must be a JSON object
  ///                         with an entry for 'url` whose value is a string
  ///                         representing a valid URL.
  init?(_ jsonValue: JSONValue?)
  {
    // Get the url from the JSON value.
    guard let url = URL(string: String(ObjectJSONValue(jsonValue)?["url"]) ?? "")
    else
    {
      return nil
    }

    // Initialize with the url.
    do { try self.init(url: url) } catch { return nil }
  }
  #endif

  /// Returns the element in `presetHeaders` located at `position`.
  ///
  /// - Parameter position: The preset's index.
  /// - Returns: The preset at `position`.
  @available(OSX 11.0, *)
  subscript(position: Int) -> PresetHeader { presetHeaders[position] }

  /// Returns the element in `presetHeaders` matching the specified values.
  ///
  /// - Parameters:
  ///   - program: The program value for the preset.
  ///   - bank: The bank value for the preset.
  /// - Returns: The matching preset or `nil`.
  @available(OSX 11.0, *)
  subscript(program program: UInt8, bank bank: UInt8) -> PresetHeader?
  {
    presetHeaders.first(where: { $0.program == program && $0.bank == bank })
  }

  /// Returns `true` iff `other.url` is equal to `url`.
  /// - Parameter other: The sound font to which equality is being compared.
  /// - Returns: `true` if the sound font instances point to the same file
  ///            and `false` otherwise.
  func isEqualTo(_ other: SoundFont2) -> Bool
  {
    // Get the two urls as file reference urls.
    let lhs = (self.url as NSURL).fileReferenceURL()
    let rhs = (other.url as NSURL).fileReferenceURL()

    return (lhs == nil
              ? false
              : (rhs == nil
                  ? lhs == nil
                  : lhs!.isEqualToFileURL(rhs!)))
  }

  /// The contents of `url` as raw data.
  /// - Requires: `url` is valid and reachable.
  var data: Data
  {
    tryOrDie(message: "Failed to retrieve data from disk.")
    {
      try Data(contentsOf: url)
    }
  }

  /// The collection of preset headers generated by parsing `data`.
  @available(OSX 11.0, *)
  var presetHeaders: [PresetHeader]
  {
    (try? File.presetHeaders(from: data)) ?? []
  }

  var description: String { "\(displayName) - \(fileName)" }
}
