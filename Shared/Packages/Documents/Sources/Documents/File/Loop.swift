//
//  Loop.swift
//  Documents
//
//  Created by Jason Cardwell on 01/06/21.
//  Copyright Â© 2021 Moondeer Studios. All rights reserved.
//
import Foundation
import MIDI
import MoonDev

@available(macCatalyst 14.0, *)
@available(iOS 14.0, *)
public extension File
{
  /// A type for specifying a repeating subsequence of node events in a track.
  struct Loop: CustomStringConvertible, LosslessJSONValueConvertible
  {
    /// Typealias for the midi event kind utilized by `Loop`.
    public typealias Event = MetaEvent
    
    /// The unique identifier for the loop within its track.
    public var identifier: UUID
    
    /// The number of times the subsequence of node events should be run.
    /// Setting this property to `0` indicates that the loop should repeat forever.
    public var repetitions: Int
    
    /// The number of ticks after the last event generated by the loop that should
    /// elapse before beginning another repetition of loop events.
    public var repeatDelay: UInt64
    
    /// The bar beat time at which point the loop begins generating events for
    /// its first repetition.
    public var start: BarBeatTime
    
    /// The bar beat time at which point the loop ends generating events for
    /// its first repetition. Setting the value of this property to a time less
    /// than or equal to `start` indicates the loop does not end.
    public var end: BarBeatTime
    
    /// An index of nodes belonging to the loop.
    public var nodes: [Node.Identifier: Node] = [:]
    
    /// Initializing from an event. The loop created will have its start and end
    /// times set to the event's time.
    ///
    /// - Parameters:
    ///   - event: To be successful the event must be a marker with text in
    ///            the form of `start(`*identifier*`):`*repetitions*`:`*repeatDelay*
    public init?(event: Event)
    {
      // Extract the identifier, repetitions, and repeat delay from the
      // text contained in the event's data.
      guard case let .marker(text) = event.data,
            let captures = (~/"^start\\(([^)]+)\\):([0-9]+):([0-9]+)$")
              .firstMatch(in: text)?.captures
      
      else
      {
        return nil
      }
      
      let capturedID = String(captures[1]?.substring ?? "")
      let capturedReps = String(captures[2]?.substring ?? "")
      let capturedDelay = String(captures[3]?.substring ?? "")
      
      guard let identifier = UUID(uuidString: capturedID),
            let repetitions = Int(capturedReps),
            let repeatDelay = UInt64(capturedDelay)
      else
      {
        return nil
      }
      
      // Intialize `identifier`, `repetitions` and `repeatDelay` using the
      // extracted values.
      self.identifier = identifier
      self.repetitions = repetitions
      self.repeatDelay = repeatDelay
      
      // Use the event's time to initialize `start` and `end`.
      start = event.time
      end = event.time
    }
    
    /// A JSON object containing the loop's `identifier`, `repetitions`,
    /// `repeatDelay`, `start` and `end` values keyed by property name. The
    /// object also contains a value array for the `nodes` property.
    public var jsonValue: JSONValue
    {
      .object([
        "identifier": .string(identifier.uuidString),
        "repetitions": .number(repetitions as NSNumber),
        "repeatDelay": .number(repeatDelay as NSNumber),
        "start": .string(start.rawValue),
        "end": .string(end.rawValue),
        "nodes": .array(Array(nodes.values.map(\Node.jsonValue)))
      ])
    }
    
    /// Initializing with a JSON value.
    /// - Parameters:
    ///   - jsonValue: To be successful `jsonValue` should be a JSON object with
    ///                keys 'identifier', 'repetitions', 'repeatDelay', 'start',
    ///                'end', and 'nodes' with values appropriate for initializing
    ///                the corresponding property.
    public init?(_ jsonValue: JSONValue?)
    {
      // Get the JSON object and extract the necessary values.
      guard let dict = ObjectJSONValue(jsonValue),
            let identifierString = String(dict["identifier"]),
            let identifier = UUID(uuidString: identifierString),
            let repetitions = Int(dict["repetitions"]),
            let repeatDelay = UInt64(dict["repeatDelay"]),
            let start = BarBeatTime(rawValue: dict["start"]?.value as? String ?? ""),
            let end = BarBeatTime(rawValue: dict["end"]?.value as? String ?? ""),
            let nodes = ArrayJSONValue(dict["nodes"])
      else
      {
        return nil
      }
      
      // Initialize the `identifier`, `repetitions`, `repeatDelay`, `start`,
      // and `end` properties.
      self.identifier = identifier
      self.repetitions = repetitions
      self.repeatDelay = repeatDelay
      self.start = start
      self.end = end
      
      // Initialize `nodes` by converting the array of JSON values into `Node`
      // instances and mapping.
      self.nodes = Dictionary(nodes.flatMap(Node.init)
                                .map { (key: $0.identifier, value: $0) })
    }
    
    public var description: String { jsonValue.prettyRawValue }
  }
}
